* Custom settings for EMACS


** Themes

#+BEGIN_SRC emacs-lisp :results output silent
(load-theme 'leuven-dark t)
#+END_SRC


** Org
*** Editing
**** Fonts

Nice proportional font, in different sizes, for the headlines. The fonts listed will be tried in sequence, and the first one found will be used.
#+BEGIN_SRC emacs-lisp :results output silent
  (let* ((variable-tuple
          (cond ((x-list-fonts "Hack")                '(:font "Hack"))
                    ((x-list-fonts "IBM Plex Sans")   '(:font "IBM Plex Sans"))
                    ((x-list-fonts "Fira Sans")       '(:font "Fira Sans"))
                    ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                    ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                    ((x-list-fonts "Verdana")         '(:font "Verdana"))
                    ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                    (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.05))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.2))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.3))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 1.4 :underline nil))))))
#+END_SRC

**** Variable-pitch and fixed-pitch faces

Enable variable-pitch-mode automatically for org buffers:
#+BEGIN_SRC emacs-lisp :results output silent
; (add-hook 'org-mode-hook 'variable-pitch-mode)
#+END_SRC

**** Font Emphasis

Ask org-mode to hide the emphasis markup (e.g. /.../ for italics, *...* for bold, etc.)
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-hide-emphasis-markers t)
#+END_SRC

**** Source Code Font

#+BEGIN_SRC emacs-lisp :results output silent
(setq org-src-fontify-natively t)
#+END_SRC

**** Lists

Font-lock substitution for list markers by replacing them with a centered-dot character:
#+BEGIN_SRC emacs-lisp :results output silent
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) ""))))))
#+END_SRC

**** Bullets

Replaces all headline markers with different Unicode bullets:
#+BEGIN_SRC emacs-lisp :results output silent
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

**** Inline images

#+BEGIN_SRC emacs-lisp :results output silent
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)
#+END_SRC

**** Indent source code
  #+BEGIN_SRC emacs-lisp :results output silent
  (setq org-src-tab-acts-natively t)
  #+END_SRC

**** Confirm source code re-eval

Prevent from re-evaluation of source code during html export.

#+BEGIN_SRC emacs-lisp :results output silent
(setq org-confirm-babel-evaluate nil)
#+END_SRC

** Wrap Region

Setup,
#+BEGIN_SRC emacs-lisp :results output silent
(require 'wrap-region)
;; (wrap-region-global-mode t)
#+END_SRC

Default wrappers,
#+BEGIN_SRC emacs-lisp :results output silent
(wrap-region-add-wrapper "$" "$")
(wrap-region-add-wrapper "{-" "-}" "#")
(wrap-region-add-wrapper "/" "/" nil 'ruby-mode)
(wrap-region-add-wrapper "/* " " */" "#" '(java-mode javascript-mode css-mode))
(wrap-region-add-wrapper "`" "`" nil '(markdown-mode ruby-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
(wrap-region-add-wrapper "#+BEGIN_SRC emacs-lisp :results output silent\n" "#+END_SRC" "#" 'org-mode)
#+END_SRC

*** Agenda
**** Setup a key bind for the agenda

#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

**** Setup C-c c to capture new TODOs

#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

**** Setup agenda for todo.org file

Set up agenda to know about our file, you can use a list of files or directories here
#+BEGIN_SRC emacs-lisp :results output silent
; (setq org-agenda-files '("~/todo.org"))
#+END_SRC

**** Todo template

#+BEGIN_SRC emacs-lisp :results output silent
(setq org-capture-templates
      '(("t" "Todo" entry (file "~/todo.org")
         "* TODO %?\n%U\n")))
#+END_SRC

** Programming
*** ESS

#+BEGIN_SRC emacs-lisp :results output silent
(require 'ess-site)
#+END_SRC

*** SBCL

#+BEGIN_SRC emacs-lisp :results output silent
(setq inferior-lisp-program "sbcl")
#+END_SRC

*** Racket

#+BEGIN_SRC emacs-lisp :results output silent
(add-hook 'scheme-mode-hook 'geiser-mode)
(setq geiser-default-implementation 'racket)
#+END_SRC


** Helm

Enable
#+BEGIN_SRC emacs-lisp :results output silent
(helm-mode 1)
#+END_SRC

Helm generic functions for completions to replace tab-completion in Emacs.
#+BEGIN_SRC emacs-lisp :results output silent
;;(global-set-key (kbd "M-x") #'helm-M-x)
;;(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
;;(global-set-key (kbd "C-x C-f") #'helm-find-files)
#+END_SRC

Enable tab completion,
#+BEGIN_SRC emacs-lisp :results output silent
;;(define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
;;(define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
;;(define-key helm-map (kbd "C-z") #'helm-select-action)
#+END_SRC

Source: https://so.nwalsh.com/2020/02/29/dot-emacs
#+BEGIN_SRC emacs-lisp :results output silent
(use-package helm
  :init
  (setq helm-split-window-inside-p            t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-scroll-amount                    8
        helm-ff-file-name-history-use-recentf t)
  ;; Remove helm-source-info-cl which I don't seem to have
  (setq helm-info-default-sources
        '(helm-source-info-elisp
          helm-source-info-eieio
          helm-source-info-pages))
  :bind (("<f1>" .      helm-resume)
         ("<f2>" .      helm-execute-kmacro)
         ("C-," .       helm-calcul-expression)
         ("C-:" .       helm-eval-expression-with-eldoc)
         ("C-c <SPC>" . helm-all-mark-rings)
         ("C-c f" .     helm-recentf)
         ("C-c g" .     helm-gid)
         ("C-c i" .     helm-imenu)
         ("C-c I" .     helm-imenu-in-all-buffers)
         ("C-h C-s" .   helm-occur)
         ("C-h a" .     helm-apropos)
         ("C-h f" .     helm-find)
         ("C-h g" .     helm-google-suggest)
         ("C-h i" .     helm-info-at-point)
         ("C-h r" .     helm-info-emacs)
         ("C-h s" .     helm-swoop)
         ("C-x C-d" .   helm-browse-project)
         ("C-x C-f" .   helm-find-files)
         ("C-x b" .     helm-mini)
         ("C-x r b" .   helm-filtered-bookmarks)
         ("C-x c b" .   helm-chrome-bookmarks)
         ("M-x" .       helm-M-x)
         ("M-y" .       helm-show-kill-ring)
         ("M-g a" .     helm-do-grep-ag)
         ([remap jump-to-register] . helm-register)
         ([remap list-buffers]     . helm-buffers-list)
         ([remap dabbrev-expand]   . helm-dabbrev)
         ([remap find-tag]         . helm-etags-select)
         ([remap xref-find-definitions] . helm-etags-select))
)
#+END_SRC

Tab completion,
#+BEGIN_SRC emacs-lisp :results output silent
(define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
(define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") #'helm-select-action)
#+END_SRC

Flycheck,
#+BEGIN_SRC emacs-lisp :results output silent
(use-package helm-flycheck
  :requires (helm))
#+END_SRC

Interface to the silver searcher.

#+BEGIN_SRC emacs-lisp :results output silent
(use-package helm-ag
  :requires (helm))
#+END_SRC

** Linum Relative

Setup
#+BEGIN_SRC emacs-lisp :results output silent
(require 'linum-relative)
(linum-on) ; turn on side bar numbering
#+END_SRC

Use display-line-number-mode as backend:

#+BEGIN_SRC emacs-lisp :results output silent
;; Use `display-line-number-mode` as linum-mode's backend for smooth performance
; (setq linum-relative-backend 'display-line-numbers-mode)
#+END_SRC

** Which Key

Setup,
#+BEGIN_SRC emacs-lisp :results output silent
(require 'which-key)
(which-key-mode)
#+END_SRC

Bottom window,
#+BEGIN_SRC emacs-lisp :results output silent
(which-key-setup-side-window-bottom)
#+END_SRC

** Origami

#+BEGIN_SRC emacs-lisp :results output silent
(require 'origami)
#+END_SRC

** Visual Regexp On Steroids

Setup
#+BEGIN_SRC  emacs-lisp :results output silent
(require 'visual-regexp-steroids)
#+END_SRC

Keyboard Mappings,
#+BEGIN_SRC emacs-lisp :results output silent
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
;; if you use multiple-cursors, this is for you:
(define-key global-map (kbd "C-c m") 'vr/mc-mark)
;; to use visual-regexp-steroids's isearch instead of the built-in regexp isearch, also include the following lines:
(define-key esc-map (kbd "C-r") 'vr/isearch-backward) ;; C-M-r
(define-key esc-map (kbd "C-s") 'vr/isearch-forward) ;; C-M-s
#+END_SRC


** Multiple Cursors

Setup
#+BEGIN_SRC emacs-lisp :results output silent
(require 'multiple-cursors)
#+END_SRC

When you have an active region that spans multiple lines, the following will add a cursor to each line:
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
#+END_SRC

When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Aggressive Indent

Setup,
#+BEGIN_SRC emacs-lisp :results output silent
(require 'aggressive-indent)
#+END_SRC

Turn it on for every programming mode,
#+BEGIN_SRC emacs-lisp :results output silent
(global-aggressive-indent-mode 1)
(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
#+END_SRC
** Dashboard

Startup,
#+BEGIN_SRC emacs-lisp :results output silent
(require 'dashboard)
(dashboard-setup-startup-hook)
#+END_SRC

Set the title
#+BEGIN_SRC emacs-lisp :results output silent
(setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
#+END_SRC

Set the banner. Value can be 'official which displays the official emacs logo 'logo which displays an alternative emacs logo 1, 2 or 3 which displays one of the text banners
"path/to/your/image.png" or "path/to/your/text.txt" which displays whatever image/text you would prefer.

#+BEGIN_SRC emacs-lisp :results output silent
(setq dashboard-startup-banner 'logo)
#+END_SRC


Content is not centered by default. To center,
#+BEGIN_SRC emacs-lisp :results output silent
(setq dashboard-center-content t)
#+END_SRC

Dashboard items,
#+BEGIN_SRC emacs-lisp :results output silent
(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)))

#+END_SRC

To display today’s agenda items on the dashboard, add agenda to dashboard-items:
#+BEGIN_SRC emacs-lisp :results output silent
; (add-to-list 'dashboard-items '(agenda) t)
#+END_SRC

To show agenda for the upcoming seven days set the variable dashboard-week-agenda to t.
#+BEGIN_SRC emacs-lisp :results output silent
; (setq dashboard-week-agenda t)
#+END_SRC

By default org-agenda entries are filter by time, only showing those task with DEADLINE or SCHEDULE-TIME. To show all agenda entries (except DONE)
#+BEGIN_SRC emacs-lisp :results output silent
; setq dashboard-filter-agenda-entry dashboard-no-filter-agenda)
#+END_SRC

** Treemacs

#+BEGIN_SRC  emacs-lisp :results output silent
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         35
          treemacs-workspace-switch-cleanup      nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

;; (use-package treemacs-evil
;;   :after treemacs evil
;;   :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

(use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
  :after treemacs persp-mode ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
#+END_SRC

Launch on startup,
#+BEGIN_SRC emacs-lisp :results output silent
(add-hook 'emacs-startup-hook 'treemacs)
#+END_SRC
** Crux

Startup,
#+BEGIN_SRC emacs-lisp :results output silent
(require 'crux)
#+END_SRC

Never want whitespace at the end of lines. Remove it on save.
#+BEGIN_SRC emacs-lisp :results output silent
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Keybindings,
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line                     )
;; (global-set-key (kbd "C-c o"               ) #'crux-open-with                                    )
(global-set-key [(shift return)]             #'crux-smart-open-line                              )
(global-set-key (kbd "C-<backspace>"       ) #'crux-kill-line-backwards                          )
(global-set-key [remap kill-whole-line]      #'crux-kill-whole-line                              )
(global-set-key (kbd "<C-k>"               )  #'crux-smart-kill-line                             )  ;; First kill to end of line, then kill the whole line.
(global-set-key (kbd "<C-S-RET>"           )  #'crux-smart-open-line-above                       )  ;; Insert an empty line above the current line and indent it properly.
(global-set-key (kbd "<S-RET>"             )  #'crux-smart-open-line                             )  ;; Insert an empty line and indent it properly (as in most IDEs).
;; (global-set-key (kbd "<C-c n>"             )  #'crux-cleanup-buffer-or-region                    )  ;; Fix indentation in buffer and strip whitespace.
(global-set-key (kbd "<C-c f>"             )  #'crux-recentf-find-file                           )  ;; Open recently visited file.
(global-set-key (kbd "<C-c u>"             )  #'crux-view-url                                    )  ;; Open a new buffer containing the contents of URL.
(global-set-key (kbd "<C-c e>"             )  #'crux-eval-and-replace                            )  ;; Eval a bit of Emacs Lisp code and replace it with its result.
(global-set-key (kbd "<C-x 4 t>"           )  #'crux-transpose-windows                           )  ;; Transpose the buffers between two windows.
;; (global-set-key (kbd "<C-c D>"             )  #'crux-delete-file-and-buffer                      )  ;; Delete current file and buffer.
;; (global-set-key (kbd "<C-c c>"             )  #'crux-copy-file-preserve-attributes               )  ;; Copy current file with file attributes preserved
;; (global-set-key (kbd "<C-c d>"             )  #'crux-duplicate-current-line-or-region            )  ;; Duplicate the current line (or region).
;; (global-set-key (kbd "<C-c M-d>"           )  #'crux-duplicate-and-comment-current-line-or-region)  ;; Duplicate and comment the current line (or region).
;; (global-set-key (kbd "<C-c r>"             )  #'crux-rename-file-and-buffer                      )  ;; Rename the current buffer and its visiting file if any.
;; (global-set-key (kbd "<C-c t>"             )  #'crux-visit-term-buffer                           )  ;; Open a terminal emulator (ansi-term).
;; (global-set-key (kbd "<C-c k>"             )  #'crux-kill-other-buffers                          )  ;; Kill all open buffers except the one you're currently in.
(global-set-key (kbd "<C-M z>"             )  #'crux-indent-defun                                )  ;; Indent the definition at point.
(global-set-key (kbd "<C-c TAB>"           )  #'crux-indent-rigidly-and-copy-to-clipboard        )  ;; Indent and copy region to clipboard
;; (global-set-key (kbd "<C-c I>"             )  #'crux-find-user-init-file                         )  ;; Open user's init file.
;; (global-set-key (kbd "<C-c ,>"             )  #'crux-find-user-custom-file                       )  ;; Open user's custom file.
;; (global-set-key (kbd "<C-c S>"             )  #'crux-find-shell-init-file                        )  ;; Open shell's init file.
(global-set-key (kbd "<C-^>"               )  #'crux-top-join-line                               )  ;; Join lines
(global-set-key (kbd "<Super-k>"           )  #'crux-kill-whole-line                             )  ;; Kill whole line
(global-set-key (kbd "<C-Backspace>"       )  #'crux-kill-line-backwards                         )  ;; Kill line backwards
(global-set-key (kbd "<C-S-Backspace>"     )  #'crux-kill-and-join-forward                       )  ;; If at end of line, join with following; otherwise kill line.
;; (global-set-key (kbd "<C-c P>"             )  #'crux-kill-buffer-truename                        )  ;; Kill absolute path of file visited in current buffer.
(global-set-key (kbd "<C-c i>"             )  #'crux-ispell-word-then-abbrev                     )  ;; Fix word using ispell and then save to abbrev.
(global-set-key (kbd "<C-x C-u>"           )  #'crux-upcase-region                               )  ;; upcase-region when transient-mark-mode is on and region is active.
(global-set-key (kbd "<C-x C-l>"           )  #'crux-downcase-region                             )  ;; downcase-region when transient-mark-mode is on and region is active.
(global-set-key (kbd "<C-x M-c>"           )  #'crux-capitalize-region                           )  ;; capitalize-region when transient-mark-mode is on and region is active.
;; (global-set-key (kbd "<M-o>"               )  #'crux-other-window-or-switch-buffer               )

#+END_SRC

** Rainbow Delimiters

Marks nested delimeters (parenthesis, brackets, etc.) in different colors.
#+BEGIN_SRC emacs-lisp :results output silent
(use-package rainbow-delimiters
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** SMEX

To auto-start Smex every time you open Emacs add these lines to your .emacs file:
#+BEGIN_SRC emacs-lisp :results output silent
(require 'smex) ; Not needed if you use package.el
(smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                  ; when Smex is auto-initialized on its first run.
#+END_SRC


Bind some keys:
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC
** Smart Mode Line & Powerline

#+BEGIN_SRC emacs-lisp :results output silent
;; These two lines you really need.
(setq sml/theme 'light)
(sml/setup)
#+END_SRC

** Fonts

*** Pretty mode

Source: https://www.modernemacs.com/post/prettify-mode/

#+BEGIN_SRC emacs-lisp :results output silent
(require 'pretty-mode)
(global-pretty-mode t)

(pretty-deactivate-groups
 '(:equality :ordering :ordering-double :ordering-triple
             :arrows :arrows-twoheaded :punctuation
             :logic :sets))

(pretty-activate-groups
 '(:sub-and-superscripts :greek :arithmetic-nary))
#+END_SRC

*** Prettify Symbols

Startup,

#+BEGIN_SRC emacs-lisp :results output silent
(global-prettify-symbols-mode 1)
#+END_SRC
** Eval in Repl

#+BEGIN_SRC emacs-lisp :results output silent
  ;; require the main file containing common functions
  (require 'eval-in-repl)

  ;; Uncomment if no need to jump after evaluating current line
  ;; (setq eir-jump-after-eval nil)

  ;; Uncomment if you want to always split the script window into two.
  ;; This will just split the current script window into two without
  ;; disturbing other windows.
  ;; (setq eir-always-split-script-window t)

  ;; Uncomment if you always prefer the two-window layout.
  ;; (setq eir-delete-other-windows t)

  ;; Place REPL on the left of the script window when splitting.
  (setq eir-repl-placement 'left)


  ;;; ielm support (for emacs lisp)
  (require 'eval-in-repl-ielm)
  ;; Evaluate expression in the current buffer.
  (setq eir-ielm-eval-in-current-buffer t)
  ;; for .el files
  (define-key emacs-lisp-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)
  ;; for *scratch*
  (define-key lisp-interaction-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)
  ;; for M-x info
  (define-key Info-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)

  ;;; cider support (for Clojure)
  ;; (require 'cider) ; if not done elsewhere
  (require 'eval-in-repl-cider)
  (define-key clojure-mode-map (kbd "<C-return>") 'eir-eval-in-cider)

  ;;; SLIME support (for Common Lisp)
  ;; (require 'slime) ; if not done elsewhere
  (require 'eval-in-repl-slime)
  (add-hook 'lisp-mode-hook
		    '(lambda ()
		       (local-set-key (kbd "<C-return>") 'eir-eval-in-slime)))

  ;;; Geiser support (for Racket and Guile Scheme)
  ;; When using this, turn off racket-mode and scheme supports
  ;; (require 'geiser) ; if not done elsewhere
  (require 'eval-in-repl-geiser)
  (add-hook 'geiser-mode-hook
		    '(lambda ()
		       (local-set-key (kbd "<C-return>") 'eir-eval-in-geiser)))

  ;;; racket-mode support (for Racket; if not using Geiser)
  ;; (require 'racket-mode) ; if not done elsewhere
  ;; (require 'eval-in-repl-racket)
  ;; (define-key racket-mode-map (kbd "<C-return>") 'eir-eval-in-racket)

  ;;; Scheme support (if not using Geiser))
  ;; (require 'scheme)    ; if not done elsewhere
  ;; (require 'cmuscheme) ; if not done elsewhere
  ;; (require 'eval-in-repl-scheme)
  ;; (add-hook 'scheme-mode-hook
  ;; 	  '(lambda ()
  ;; 	     (local-set-key (kbd "<C-return>") 'eir-eval-in-scheme)))

  ;;; Hy support
  ;; (require 'hy-mode) ; if not done elsewhere
  (require 'eval-in-repl-hy)
  (define-key hy-mode-map (kbd "<C-return>") 'eir-eval-in-hy)


  ;;; Python support
  ;; (require 'python) ; if not done elsewhere
  (require 'eval-in-repl-python)
  (add-hook 'python-mode-hook
	    '(lambda ()
	       (local-set-key (kbd "<C-return>") 'eir-eval-in-python)))

  ;;; Ruby support
  ;; (require 'ruby-mode) ; if not done elsewhere
  ;; (require 'inf-ruby)  ; if not done elsewhere
  ;; (require 'eval-in-repl-ruby)
  ;; (define-key ruby-mode-map (kbd "<C-return>") 'eir-eval-in-ruby)

  ;;; SML support
  ;; (require 'sml-mode) ; if not done elsewhere
  ;; (require 'eval-in-repl-sml)
  ;; (define-key sml-mode-map (kbd "<C-return>") 'eir-eval-in-sml)
  ;; (define-key sml-mode-map (kbd "C-;") 'eir-send-to-sml-semicolon)

  ;;; OCaml support
  ;; (require 'tuareg) ; if not done elsewhere
  ;; (require 'eval-in-repl-ocaml)
  ;; (define-key tuareg-mode-map (kbd "<C-return>") 'eir-eval-in-ocaml)
  ;; function to send a semicolon to OCaml REPL
  ;; (define-key tuareg-mode-map (kbd "C-;") 'eir-send-to-ocaml-semicolon)

  ;;; Prolog support (Contributed by m00nlight)
  ;; if not done elsewhere
  ;; (autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
  ;; (autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
  ;; (autoload 'mercury-mode "prolog" "Major mode for editing Mercury programs." t)
  ;; (setq prolog-system 'swi)
  ;; (setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
  ;;                                 ("\\.m$" . mercury-mode))
  ;;                                auto-mode-alist))
  ;; (require 'eval-in-repl-prolog)
  ;; (add-hook 'prolog-mode-hook
  ;;          '(lambda ()
  ;;             (local-set-key (kbd "<C-return>") 'eir-eval-in-prolog)))

  ;;; Javascript support
  ;; (require 'js3-mode)  ; if not done elsewhere
  ;; (require 'js2-mode)  ; if not done elsewhere
  ;; (require 'js-comint) ; if not done elsewhere
  ;; (with-eval-after-load 'js3-mode
  ;;   (require 'eval-in-repl-javascript)
  ;;   (define-key js3-mode-map (kbd "<C-return>") 'eir-eval-in-javascript))
  ;; (with-eval-after-load 'js2-mode
  ;;   (require 'eval-in-repl-javascript)
  ;;   (define-key js2-mode-map (kbd "<C-return>") 'eir-eval-in-javascript))


  ;; Shell support
  (require 'eval-in-repl-shell)
  (add-hook 'sh-mode-hook
	    '(lambda()
	       (local-set-key (kbd "C-<return>") 'eir-eval-in-shell)))
  ;; Version with opposite behavior to eir-jump-after-eval configuration
  (defun eir-eval-in-shell2 ()
    "eval-in-repl for shell script (opposite behavior)

  This version has the opposite behavior to the eir-jump-after-eval
  configuration when invoked to evaluate a line."
    (interactive)
    (let ((eir-jump-after-eval (not eir-jump-after-eval)))
	 (eir-eval-in-shell)))
  (add-hook 'sh-mode-hook
	    '(lambda()
	       (local-set-key (kbd "C-M-<return>") 'eir-eval-in-shell2)))

  ;;; Elixir support
  ;; (require 'elixir-mode) ; if not done elsewhere
  ;; (require 'alchemist)   ; if not done elsewhere
  ;; (require 'eval-in-repl-ruby)
  ;; (define-key elixir-mode-map (kbd "<C-return>") 'eir-eval-in-iex)

  ;;; Erlang support
  ;; (require 'erlang-mode) ; if not done elsewhere
  ;; (require 'eval-in-repl-erlang)
  ;; (define-key erlang-mode-map (kbd "<C-return>") 'eir-eval-in-erlang)

  ;;; Elm support
  ;; (require 'elm-mode) ; if not done elsewhere
  ;; (require 'eval-in-repl-elm)
  ;; (define-key elm-mode-map (kbd "<C-return>") 'eir-eval-in-elm)
#+END_SRC
** Custom

*** Mark whole line for copying

#+BEGIN_SRC emacs-lisp :results output silent
(defun mark-whole-line ()
    "Combinition of C-a, mark, C-e"
    (interactive)
    (move-beginning-of-line nil)
    (set-mark-command nil)
    (move-end-of-line nil))
(global-set-key (kbd "C-2") 'mark-whole-line) ;
#+END_SRC
